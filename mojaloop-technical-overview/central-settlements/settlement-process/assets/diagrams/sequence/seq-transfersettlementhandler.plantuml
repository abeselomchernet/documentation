/'*****
 License
 --------------
 Copyright Â© 2017 Bill & Melinda Gates Foundation
 The Mojaloop files are made available by the Bill & Melinda Gates Foundation under the Apache License, Version 2.0 (the "License") and you may not use these files except in compliance with the License. You may obtain a copy of the License at
 http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, the Mojaloop files are distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
 Contributors
 --------------
 This is the official list of the Mojaloop project contributors for this file.
 Names of the original copyright holders (individuals or organizations)
 should be listed with a '*' in the first column. People who have
 contributed from an organization can be listed under the organization
 that actually holds the copyright for their contributions (see the
 Gates Foundation organization for an example). Those individuals should have
 their names indented and be marked with a '-'. Email address can be added
 optionally within square brackets <email>.
 * Gates Foundation
 - Name Surname <name.surname@gatesfoundation.com>

 * Neal Donnan <neal.donnan@modusbox.com>
 --------------
 ******'/

@startuml
' declare title
title Transfer Settlement Handler Consume (Success)
autonumber
' Actor Keys:
'   boundary - APIs/Interfaces, etc
'   collections - Kafka Topics
'   control - Kafka Consumers
'   entity - Database Access Objects
'   database - Database Persistance Store

' declare actors
collections "topic-notification" as TOPIC_NOTIFICATION
control "Transfer Settlement Handler" as SETTLEMENT_HANDLER
database "central_ledger" as DB
entity "Scripts Loader" as SCRIPTS_LOADER
entity "Script Engine" as SCRIPT_ENGINE
entity "Transaction DAO" as TRANSACTION_DAO
entity "Settlement DAO" as SETTLEMENT_DAO

box "Settlement Service" #LightGreen
    participant TOPIC_NOTIFICATION
    participant SETTLEMENT_HANDLER
    participant SCRIPTS_LOADER
    participant SCRIPT_ENGINE
    participant TRANSACTION_DAO
    participant SETTLEMENT_DAO
end box

box "Central Services" #lightyellow
    participant DB
end box

' start flow
activate SETTLEMENT_HANDLER
group Transfer Settlement Handler Consume (Success)
    group Load Scripts
        SETTLEMENT_HANDLER -> SCRIPTS_LOADER: load scripts (scriptDirectory)
        activate SCRIPTS_LOADER
        loop script
            SCRIPTS_LOADER -> SCRIPTS_LOADER: retrieve script configuration
        end
        note right of SETTLEMENT_HANDLER #yellow
            example:
            {
                scriptType: {
                    scriptAction: {
                        scriptStatus: {[
                            {
                                filename: "interchangeFeeCalculation.js",
                                startTime: "2020-06-01T00:00:00.000Z",
                                endTime: "2100-12-31T23:59:59.999Z",
                                script: [vm.Script]
                            }
                        ]}
                    }
                }
            }
        end note
        SCRIPTS_LOADER --> SETTLEMENT_HANDLER: script map
        deactivate SCRIPTS_LOADER
    end
    alt Consume Single Message
        TOPIC_NOTIFICATION <- SETTLEMENT_HANDLER: Consume notification event message
        activate TOPIC_NOTIFICATION
        deactivate TOPIC_NOTIFICATION
        group Validate Message
            SETTLEMENT_HANDLER <-> SETTLEMENT_HANDLER: Validate event - Rule: message has payload\n<color #FF0000><b>Error codes:</b> 2001</color>
        end
        opt action == 'COMMIT'
            group Execute Scripts
                SETTLEMENT_HANDLER -> SCRIPTS_LOADER: execute scripts
                activate SCRIPTS_LOADER
                loop script
                    SCRIPTS_LOADER -> SCRIPT_ENGINE: execute(script, message payload)
                    activate SCRIPT_ENGINE
                    SCRIPT_ENGINE -> TRANSACTION_DAO: Get transaction by transfer Id
                    activate TRANSACTION_DAO
                    TRANSACTION_DAO -> DB: retrieve ILP packet from ilpPacket
                    activate DB
                    DB --> TRANSACTION_DAO: ilpPacket row
                    deactivate DB
                    TRANSACTION_DAO --> SCRIPT_ENGINE: ilpPacket row
                    SCRIPT_ENGINE -> TRANSACTION_DAO: Get transaction object
                    TRANSACTION_DAO -> TRANSACTION_DAO: decode ILP packet
                    TRANSACTION_DAO --> SCRIPT_ENGINE: Transaction object
                    SCRIPT_ENGINE -> SCRIPT_ENGINE: execute script in sandbox
                    deactivate
                    SCRIPT_ENGINE --> SCRIPTS_LOADER: Ledger entries
                    deactivate SCRIPT_ENGINE
                    SCRIPTS_LOADER -> SCRIPTS_LOADER: Merge results
                end
                SCRIPTS_LOADER --> SETTLEMENT_HANDLER: script results
                deactivate SCRIPTS_LOADER
            end
            group Retry (default 3 retries)
                group <color #blue>DB TRANSACTION: Insert ledger entries and settle transfer</color>
                    SETTLEMENT_HANDLER -> SETTLEMENT_DAO: Insert ledger entries
                    loop ledgerEntry
                        SETTLEMENT_DAO -> DB: Insert transferParticipant records
                        activate DB
                        deactivate DB
                        hnote over DB #lightyellow
                            insert into **transferParticipant**
                            select {transferId} AS transferId,
                                   `PC`.`participantCurrencyId`,
                                   IFNULL(`T1`.`transferparticipantroletypeId`,
                                          `T2`.`transferparticipantroletypeId`) as `transferParticipantRoleTypeId`,
                                   `E`.`ledgerEntryTypeId`,
                                   CASE `P`.`name`
                                       WHEN {ledgerEntry.payerFspId} THEN {ledgerEntry.amount}
                                       WHEN {ledgerEntry.payeeFspId} THEN {ledgerEntry.amount * -1}
                                       ELSE 0
                                   END AS `amount`
                            from `participantCurrency` as `PC`
                            inner join `participant` as `P` on `P`.`participantId` = `PC`.`participantId`
                            inner join `ledgerEntryType` as `E` on `E`.`LedgerAccountTypeId` = `PC`.`LedgerAccountTypeId`
                            left outer join `transferParticipantRoleType` as `T1` on `P`.`name` = {ledgerEntry.payerFspId} and `T1`.`name` = 'PAYER_DFSP'
                            left outer join `transferParticipantRoleType` as `T2` on `P`.`name` = {ledgerEntry.payerFspId} and `T2`.`name` = 'PAYEE_DFSP'
                            where `E`.`name` = {ledgerEntry.ledgerEntryTypeId}
                              and `P`.`name` in ({ledgerEntry.payerFspId}, {ledgerEntry.payeeFspId})
                              and `PC`.`currencyId` = {ledgerEntry.currency};
                        end hnote
                        SETTLEMENT_DAO -> DB: Update positions
                        activate DB
                        deactivate DB
                        loop transferParticipant records
                            hnote over DB #lightyellow
                                update **`participantPosition`**
                                set `value` = `value` + {record.amount}
                                where `participantCurrencyId` = {record.participantCurrencyId};
                            end hnote
                        end
                        SETTLEMENT_DAO -> DB: Get transferStateChange record
                        activate DB
                        deactivate DB
                        hnote over DB #lightyellow
                            select `transferStateChangeId`
                            from **`transferStateChange`**
                            where `transferId` = {transferId}
                              and `transferStateId` = 'COMMITTED';
                        end hnote
                        SETTLEMENT_DAO -> DB: Insert participantPositionChange records
                        activate DB
                        deactivate DB
                        hnote over DB #lightyellow
                            insert into **`participantPositionChange`**
                            select `participantPositionId`, {transferStateChangeId}, `value`, `reservedValue`
                            from `participantPosition`
                            where `participantCurrencyId` = {transferParticipantRecord1.participantCurrencyId}
                               or `participantCurrencyId` = {transferParticipantRecord2.participantCurrencyId};
                        end hnote
                    end
                    SETTLEMENT_HANDLER -> SETTLEMENT_DAO: Settle transfer if CGS
                    SETTLEMENT_DAO -> DB: Insert transferParticipant entries
                    activate DB
                    deactivate DB
                    hnote over DB #lightyellow
                        insert into **`transferParticipant`** (transferID, participantCurrencyId, transferParticipantRoleTypeId, ledgerEntryTypeId,
                                                         amount)
                        select `TP`.`transferId`,
                               `TP`.`participantCurrencyId`,
                               `TP`.`transferParticipantRoleTypeId`,
                               `TP`.`ledgerEntryTypeId`,
                               `TP`.`amount` * -1
                        from `transferParticipant` as `TP`
                                 inner join `participantCurrency` as `PC` on `TP`.`participantCurrencyId` = `PC`.`participantCurrencyId`
                                 inner join `settlementModel` as `M` on `PC`.`ledgerAccountTypeId` = `M`.`ledgerAccountTypeId`
                                 inner join `settlementGranularity` as `G` on `M`.`settlementGranularityId` = `G`.`settlementGranularityId`
                        where (`TP`.`transferId` = {transferId} and (`G`.`name` = 'GROSS'))
                        union
                        select `TP`.`transferId`,
                               `PC1`.`participantCurrencyId`,
                               `TP`.`transferParticipantRoleTypeId`,
                               `TP`.`ledgerEntryTypeId`,
                               `TP`.`amount`
                        from `transferParticipant` as `TP`
                                 inner join `participantCurrency` as `PC` on `TP`.`participantCurrencyId` = `PC`.`participantCurrencyId`
                                 inner join `settlementModel` as `M` on `PC`.`ledgerAccountTypeId` = `M`.`ledgerAccountTypeId`
                                 inner join `settlementGranularity` as `G` on `M`.`settlementGranularityId` = `G`.`settlementGranularityId`
                                 inner join `participantCurrency` as `PC1`
                                            on `PC1`.`currencyId` = `PC`.`currencyId` and `PC1`.`participantId` = `PC`.`participantId` and
                                               `PC1`.`ledgerAccountTypeId` = `M`.`settlementAccountTypeId`
                        where (`TP`.`transferId` = {transferId} and (`G`.`name` = 'GROSS'));
                    end hnote
                    SETTLEMENT_DAO -> DB: Update participantPosition records
                    activate DB
                    deactivate DB
                    hnote over DB #lightyellow
                        update **`participantPosition`** as `PP`
                            inner join (select `PC`.`participantCurrencyId`, `TP`.`Amount`
                                         from `transferParticipant` as `TP`
                                                  inner join `participantCurrency` as `PC`
                                                             on `TP`.`participantCurrencyId` = `PC`.`participantCurrencyId`
                                                  inner join `settlementModel` as `M`
                                                             on `PC`.`ledgerAccountTypeId` = `M`.`ledgerAccountTypeId`
                                                  inner join `settlementGranularity` as `G`
                                                             on `M`.`settlementGranularityId` = `G`.`settlementGranularityId`
                                         where (`TP`.`transferId` = {transferId} and (`G`.`name` = 'GROSS'))
                                         union
                                         select `PC1`.`participantCurrencyId`, `TP`.`amount`
                                         from `transferParticipant` as `TP`
                                                  inner join `participantCurrency` as `PC`
                                                             on `TP`.`participantCurrencyId` = `PC`.`participantCurrencyId`
                                                  inner join `settlementModel` as `M`
                                                             on `M`.`ledgerAccountTypeId` = `PC`.`ledgerAccountTypeId`
                                                  inner join `settlementGranularity` as `G`
                                                             on `M`.`settlementGranularityId` = `G`.`settlementGranularityId`
                                                  inner join `participantCurrency` as `PC1`
                                                             on `PC1`.`currencyId` = `PC`.`currencyId` and
                                                                `PC1`.`participantId` = `PC`.`participantId` and
                                                                `PC1`.`ledgerAccountTypeId` = `M`.`settlementAccountTypeId`
                                         where (`TP`.`transferId` = {transferId} and (`G`.`name` = 'GROSS')))
                            AS TR ON PP.participantCurrencyId = TR.ParticipantCurrencyId
                        set `value` = `PP`.`value` - `TR`.`amount`;
                    end hnote
                    SETTLEMENT_DAO -> DB: Insert participantPositionChange records
                    activate DB
                    deactivate DB
                    hnote over DB #lightyellow
                        insert into **`participantPositionChange`** (participantPositionId, transferStateChangeId, value, reservedValue)
                        select `PP`.`participantPositionId`, `TSC`.`transferStateChangeId`, `PP`.`value`, `PP`.`reservedValue`
                        from `participantPosition` as `PP`
                                 inner join (select `PC`.`participantCurrencyId`
                                             from `transferParticipant` as `TP`
                                                      inner join `participantCurrency` as `PC`
                                                                 on `TP`.`participantCurrencyId` = `PC`.`participantCurrencyId`
                                                      inner join `settlementModel` as `M`
                                                                 on `PC`.`ledgerAccountTypeId` = `M`.`ledgerAccountTypeId`
                                                      inner join `settlementGranularity` as `G`
                                                                 on `M`.`settlementGranularityId` = `G`.`settlementGranularityId`
                                             where (`TP`.`transferId` = {transferId} and (`G`.`name` = 'GROSS'))
                                             union
                                             select `PC1`.`participantCurrencyId`
                                             from `transferParticipant` as `TP`
                                                      inner join `participantCurrency` as `PC`
                                                                 on `TP`.`participantCurrencyId` = `PC`.`participantCurrencyId`
                                                      inner join `settlementModel` as `M`
                                                                 on `PC`.`ledgerAccountTypeId` = `PC`.`ledgerAccountTypeId`
                                                      inner join `settlementGranularity` as `G`
                                                                 on `M`.`settlementGranularityId` = `G`.`settlementGranularityId`
                                                      inner join `participantCurrency` as `PC1` on `PC1`.`currencyId` = `PC`.`currencyId` and
                                                                                                   `PC1`.`participantId` = `PC`.`participantId` and
                                                                                                   `PC1`.`ledgerAccountTypeId` = `M`.`settlementAccountTypeId`
                                             where (`TP`.`transferId` = {transferId} and (`G`.`name` = 'GROSS'))) AS TR
                                            ON PP.participantCurrencyId = TR.ParticipantCurrencyId
                                 inner join `transferStateChange` as `TSC`
                                            on `TSC`.`transferID` = {transferId} and `TSC`.`transferStateId` = 'SETTLED';
                    end hnote
                end
            end
        end
    else Consume Batch Messages
        note left of SETTLEMENT_HANDLER #lightblue
            To be delivered by future story
        end note
    end
end
deactivate SETTLEMENT_HANDLER
@enduml
